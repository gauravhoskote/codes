#include<bits/stdc++.h> 
using namespace std; 
void addEdge(vector <pair<int, int> > adj[], int u, 
                                     int v, int wt) 
{ 
    adj[u].push_back(make_pair(v, wt)); 
    adj[v].push_back(make_pair(u, wt)); 
} 
void shortestPath(vector<pair<int,int> > adj[], int V, int src) 
{ 
    priority_queue< pair<int,int>, vector <pair<int,int>> , greater<pair<int,int>> > pq; 
    vector<int> dist(V, INT_MAX); 
    pq.push(make_pair(0, src)); 
    dist[src] = 0; 
    while (!pq.empty()) 
    {  
        int u = pq.top().second; 
        pq.pop(); 
        for (auto x : adj[u]) 
        { 
            int v = x.first; 
            int weight = x.second; 
            if (dist[v] > dist[u] + weight) 
            { 
                dist[v] = dist[u] + weight; 
                pq.push(make_pair(dist[v], v)); 
            } 
        } 
    } 
    for (int i = 0; i < V; ++i){
        cout<<i<<" "<<dist[i]<<endl;
    } 
        
} 
int main() 
{ 
    int V, e; 
    cout<<"Enter no of nodes";
    cin>>V;
    cout<<"Enter no of edges";
    cin>>e;
    vector<pair<int,int> > adj[V]; 
    int u,v,w;
    for(int i = 0; i < e; i++){
        cin>>u>>v>>w;
        addEdge(adj,u,v,w);
    }
    shortestPath(adj, V, 0); 
    return 0; 
} 
